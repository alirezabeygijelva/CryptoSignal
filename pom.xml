<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>dev.alireza</groupId>
	<artifactId>fms</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>fms</name>
	<description>financial market signal notification</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>21</java.version>
		<kotlin.version>1.9.24</kotlin.version>
		<openapi.version>7.7.0</openapi.version>
		<jooq.version>3.19.10</jooq.version>
		<flyway.version>10.16.0</flyway.version>
		<mysql.jdbc.version>9.0.0</mysql.jdbc.version>
		<binance.version>3.2.0</binance.version>
		<jsonwebtoken.version>0.11.5</jsonwebtoken.version>
		<telegram.starter.version>6.9.7.1</telegram.starter.version>
		<telegrambot.version>7.9.1</telegrambot.version>
		<!-- NodeJS & NPM -->
		<node.version>v20.5.0</node.version>
		<npm.version>8.14.0</npm.version>
		<!--suppress UnresolvedMavenProperty -->
		<db.url>jdbc:mysql://${env.DB_HOST}:${env.DB_PORT}/${env.DB_SCHEMA}</db.url>
		<!--suppress UnresolvedMavenProperty -->
		<db.user>${env.DB_USER}</db.user>
		<!--suppress UnresolvedMavenProperty -->
		<db.password>${env.DB_PASSWORD}</db.password>
		<!--suppress UnresolvedMavenProperty -->
		<db.schema>${env.DB_SCHEMA}</db.schema>
	</properties>
	<dependencies>
		<!-- Spring -->
		<!--<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jooq</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-commons</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>

		<!-- Kotlin -->
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-kotlin</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-reflect</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-stdlib</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-kotlin</artifactId>
			<version>${jooq.version}</version>
		</dependency>

		<!-- Database -->
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<version>${mysql.jdbc.version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
			<version>${flyway.version}</version>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-mysql</artifactId>
			<version>${flyway.version}</version>
		</dependency>

		<!-- Swagger & OpenApi -->
		<dependency>
			<groupId>io.swagger.core.v3</groupId>
			<artifactId>swagger-annotations</artifactId>
			<version>2.2.21</version>
		</dependency>
		<dependency>
			<groupId>org.openapitools</groupId>
			<artifactId>jackson-databind-nullable</artifactId>
			<version>0.2.6</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
			<version>2.17.0</version>
		</dependency>
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-common</artifactId>
			<version>2.5.0</version>
		</dependency>
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.5.0</version>
		</dependency>

		<!-- Binance API Connector -->
		<dependency>
			<groupId>io.github.binance</groupId>
			<artifactId>binance-connector-java</artifactId>
			<version>${binance.version}</version>
		</dependency>

		<!-- JWT Utils -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>${jsonwebtoken.version}</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>${jsonwebtoken.version}</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>${jsonwebtoken.version}</version>
		</dependency>

		<!-- Telegram Bot -->
		<dependency>
			<groupId>org.telegram</groupId>
			<artifactId>telegrambots-spring-boot-starter</artifactId>
			<version>${telegram.starter.version}</version>
		</dependency>
		<dependency>
			<groupId>org.telegram</groupId>
			<artifactId>telegrambots-abilities</artifactId>
			<version>${telegrambot.version}</version>
		</dependency>
		<dependency>
			<groupId>org.telegram</groupId>
			<artifactId>telegrambots-client</artifactId>
			<version>${telegrambot.version}</version>
		</dependency>

		<!-- External Tools -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.16.0</version>
		</dependency>

		<!-- Test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-test-junit5</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<!--<sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
		<testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>-->
		<finalName>${project.artifactId}</finalName>
		<plugins>

			<!-- Spring Boot Maven Plugin -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<mainClass>dev.alireza.fms.ApplicationKt</mainClass>
				</configuration>
			</plugin>

			<!-- Kotlin Maven Plugin -->
			<plugin>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>compile</id>
						<goals>
							<goal>compile</goal>
						</goals>
						<configuration>
							<sourceDirs>
								<sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
								<sourceDir>${project.basedir}/src/main/java</sourceDir>
							</sourceDirs>
						</configuration>
					</execution>
					<execution>
						<id>test-compile</id>
						<goals>
							<goal>test-compile</goal>
						</goals>
						<configuration>
							<sourceDirs>
								<sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
								<sourceDir>${project.basedir}/src/test/java</sourceDir>
							</sourceDirs>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<args>
						<arg>-Xjsr305=strict</arg>
					</args>
					<compilerPlugins>
						<plugin>spring</plugin>
						<plugin>jpa</plugin>
					</compilerPlugins>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.jetbrains.kotlin</groupId>
						<artifactId>kotlin-maven-allopen</artifactId>
						<version>${kotlin.version}</version>
					</dependency>
					<dependency>
						<groupId>org.jetbrains.kotlin</groupId>
						<artifactId>kotlin-maven-noarg</artifactId>
						<version>${kotlin.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<!-- Maven Java Compliler Plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
				<executions>
					<execution>
						<id>default-compile</id>
						<phase>none</phase>
					</execution>
					<execution>
						<id>default-testCompile</id>
						<phase>none</phase>
					</execution>
					<execution>
						<id>java-compile</id>
						<phase>compile</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
					<execution>
						<id>java-test-compile</id>
						<phase>test-compile</phase>
						<goals>
							<goal>testCompile</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- OpenAPI Generator Plugin -->
			<plugin>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-maven-plugin</artifactId>
				<version>${openapi.version}</version>
				<executions>
					<execution>
						<id>spring-openapi-generator</id>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<generatorName>spring</generatorName>
							<inputSpec>${project.basedir}/src/main/resources/api/spec.yaml</inputSpec>
							<configurationFile>${project.basedir}/src/main/resources/api/config.json</configurationFile>
							<ignoreFileOverride>${project.basedir}/src/main/resources/api/.openapi-generator-ignore</ignoreFileOverride>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- fix issue: https://stackoverflow.com/questions/73461247/spring-boot-openapi-generator-plugin-creates-unwanted-test-file-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<phase>process-sources</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<!-- remove the unwanted generated testcases by the spring generator of openapi -->
								<delete dir="${project.build.directory}/generated-sources/openapi/src/test" />
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Read from application.properties the DB configuration -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.2.1</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>src/main/resources/application.properties</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Flyway Maven Plugin -->
			<plugin>
				<groupId>org.flywaydb</groupId>
				<artifactId>flyway-maven-plugin</artifactId>
				<version>${flyway.version}</version>
				<!-- Must be in the same phase as JOOQ -->
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>migrate</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<initSql>SET default_storage_engine=InnoDB;</initSql>
					<outOfOrder>false</outOfOrder>
					<cleanDisabled>true</cleanDisabled>
					<driver>${spring.datasource.driver-class-name}</driver>
					<url>${db.url}</url>
					<user>${db.user}</user>
					<password>${db.password}</password>
					<schemas>
						<schema>${db.schema}</schema>
					</schemas>
					<locations>
						<location>filesystem:src/main/resources/db/migration</location>
					</locations>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.flywaydb</groupId>
						<artifactId>flyway-mysql</artifactId>
						<version>${flyway.version}</version>
					</dependency>
				</dependencies>
			</plugin>

			<!-- JOOQ Code Generator Plugin -->
			<plugin>
				<groupId>org.jooq</groupId>
				<artifactId>jooq-codegen-maven</artifactId>
				<version>${jooq.version}</version>

				<!-- The plugin should hook into the generate goal -->
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>

				<!-- Manage the plugin's dependency -->
				<dependencies>
					<dependency>
						<groupId>org.jooq</groupId>
						<artifactId>jooq-meta</artifactId>
						<version>${jooq.version}</version>
					</dependency>
					<dependency>
						<groupId>org.jooq</groupId>
						<artifactId>jooq-codegen</artifactId>
						<version>${jooq.version}</version>
					</dependency>
					<dependency>
						<groupId>com.mysql</groupId>
						<artifactId>mysql-connector-j</artifactId>
						<version>${mysql.jdbc.version}</version>
					</dependency>
				</dependencies>
				<configuration>
					<jdbc>
						<driver>${spring.datasource.driver-class-name}</driver>
						<url>${db.url}</url>
						<user>${db.user}</user>
						<password>${db.password}</password>
					</jdbc>
					<generator>
						<name>org.jooq.codegen.KotlinGenerator</name>
						<database>
							<name>org.jooq.meta.mysql.MySQLDatabase</name>
							<includes>.*</includes>
							<excludes/>
							<inputSchema>${db.schema}</inputSchema>
						</database>
						<target>
							<!-- The destination package of your generated classes (within the destination directory) -->
							<packageName>dev.alireza.fms.jooq</packageName>
							<!-- The destination directory of your generated classes. Using Maven directory layout here -->
							<directory>${project.build.directory}/generated-sources/jooq</directory>
						</target>
						<generate>
							<deprecated>false</deprecated>
							<kotlinSetterJvmNameAnnotationsOnIsPrefix>true</kotlinSetterJvmNameAnnotationsOnIsPrefix>
							<pojosAsKotlinDataClasses>true</pojosAsKotlinDataClasses>
							<fluentSetters>true</fluentSetters>
						</generate>
						<strategy>
							<name>org.jooq.codegen.DefaultGeneratorStrategy</name>
						</strategy>
					</generator>
				</configuration>
			</plugin>

			<!-- Build VueJs Front-End -->
			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<version>1.15.0</version>
				<executions>
					<execution>
						<id>Install node and npm</id>
						<goals>
							<goal>install-node-and-npm</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<nodeVersion>${node.version}</nodeVersion>
							<npmVersion>${npm.version}</npmVersion>
						</configuration>
					</execution>
					<execution>
						<id>npm install</id>
						<goals>
							<goal>npm</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<arguments>install</arguments>
						</configuration>
					</execution>
					<execution>
						<id>npm build</id>
						<goals>
							<goal>npm</goal>
						</goals>
						<phase>generate-resources</phase>
						<configuration>
							<arguments>run build</arguments>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<nodeVersion>${node.version}</nodeVersion>
					<workingDirectory>frontend</workingDirectory>
				</configuration>
			</plugin>
			<!-- Copy output source of built Front-End -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.1.0</version>
				<!-- bugfix: https://stackoverflow.com/questions/55868995/ots-parsing-error-failed-to-convert-woff-2-0-font-to-sfnt-for-font-files-of-gly -->
				<configuration>
					<nonFilteredFileExtensions>
						<nonFilteredFileExtension>ttf</nonFilteredFileExtension>
						<nonFilteredFileExtension>woff</nonFilteredFileExtension>
						<nonFilteredFileExtension>woff2</nonFilteredFileExtension>
						<nonFilteredFileExtension>eot</nonFilteredFileExtension>
						<nonFilteredFileExtension>svg</nonFilteredFileExtension>
					</nonFilteredFileExtensions>
				</configuration>
				<executions>
					<execution>
						<id>Copy Vue frontend into Spring Boot target static folder</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>data/frontend</outputDirectory>
							<resources>
								<resource>
									<directory>frontend/dist/spa</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>
